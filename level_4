#include <SDL.h>
#include <SDL_image.h>
#include <stdio.h>
#include <SDL_ttf.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#define WINDOW_W 1280
#define WINDOW_H 720
#define FPS 60
#define FRAME_TIME (1000 / FPS)
#define GRAVITY 0.35f;

const int ALICE_STAR_POSITION_X = 180;
const int ALICE_STAR_POSITION_Y = 500;
const int FLOR_POSITION_Y = 700;
const int LEDGE_HEIGHT = 64;
const int LEDGE_WIDTH = 256;
const int COLLACTABLE_SIZE = 48;
const int DOOR_HEIGHT = 64;
const int DOOR_WIDTH = 48;
int  isEnd = 0;

typedef struct Door
{
	int x, y, w, h;
	bool isCollected;
} Door;

typedef struct
{
	float x, y;
	float dx, dy;
	int onLedge;
	int animFrame, facingLeft, slowingDown;
} object;

typedef struct
{
	int x, y, w, h;
} Ledge;

typedef struct Collectable
{
	int x, y, w, h;
	bool isCollected;
} Collectable;

typedef struct
{
	int time;
	float scrollX;
	int counter;

	object alice;
	Door door;
	Door door1;
	Collectable collectable;
	Ledge ledges[100];

	//Images
	SDL_Texture* aliceFrames[6];
	SDL_Texture* tiles;
	SDL_Texture* doorImage;
	SDL_Texture* door1Image;
	SDL_Texture* collactbleImage;
	SDL_Texture* backgroundTexture;
	SDL_Texture* texture; //end
	SDL_Texture* texture1;
	
	//Renderer
	SDL_Renderer* renderer;

} GameState;

void loadlevel3(GameState* game,SDL_Window* wind, SDL_Renderer* renderer,
char* path,float x1, float y1, float x2, float y2, float wt1, float ht1, float wt2, float ht2, object* alice);
void loadGame(GameState* game);
void processEvents(SDL_Window* wind, GameState* game);
void doRender(SDL_Renderer* renderer, GameState* game);
void collisionDetect(GameState* game);
void process(GameState* game);
void initCollectableAboveLedge(GameState* game);
void renderCounterText(SDL_Renderer* renderer, GameState* game);
int collide2d(float x1, float y1, float x2, float y2, float wt1, float ht1, float wt2, float ht2);
void teleportAliceToStartPosition(object* alice);
int isAliceOnTheFloor(object* alice);
void renderCallectable(SDL_Renderer* renderer, GameState* game);
void initDoors(GameState* game);
void renderDoors(SDL_Renderer* renderer, GameState* game);
void DisplayEndPicture(SDL_Renderer* renderer, char* path, GameState* game);

void loadGame(GameState* game) {

	SDL_Surface* surface = NULL;

	//Load images and create rendering textures from them
	surface = IMG_Load("Alice_stand.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_stand.png!\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[0] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("Alice_1.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_1.png!\n\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[1] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("Alice_2.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_2.png!\n\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[2] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("Alice_3.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_3.png!\n\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[3] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("Alice_4.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_4.png!\n\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[4] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("Alice_J.png");
	if (surface == NULL)
	{
		printf("Cannot find Alice_J.png!\n\n");
		SDL_Quit();
		exit(1);
	}
	game->aliceFrames[5] = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("tiles1.png");
	game->tiles = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("door.bmp");
	game->doorImage = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("door1.bmp");
	game->door1Image = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("cookie4.bmp");
	game->collactbleImage = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);

	surface = IMG_Load("level3.bmp");
	game->backgroundTexture = SDL_CreateTextureFromSurface(game->renderer, surface);
	SDL_FreeSurface(surface);
	
	if (surface == NULL)
	{
		printf("Cannot find background image: \n");
		SDL_Quit();
		exit(1);
	}
	
	game->scrollX = 0;
	//cube
	game->alice.x = ALICE_STAR_POSITION_X;
	game->alice.y = ALICE_STAR_POSITION_Y;
	game->alice.dx = 0;
	game->alice.dy = 0;
	game->alice.onLedge = 0;
	game->alice.animFrame = 0;
	game->alice.facingLeft = 1;
	game->alice.slowingDown = 0;

	game->time = 0;

	//init ledges
	for (int i = 0; i < 100; i++)
	{
		game->ledges[i].w = LEDGE_WIDTH;
		game->ledges[i].h = LEDGE_HEIGHT;
		game->ledges[i].x = i * LEDGE_WIDTH;
		game->ledges[i].y = FLOR_POSITION_Y;

	
		int baseX = 1;
		int baseY = 660;
		int xDiff = 256;
		int yDiff = 108;

		game->ledges[99].x = baseX;
		game->ledges[99].y = baseY;
		game->ledges[99].h = 60;

		game->ledges[98].x = baseX + xDiff;
		game->ledges[98].y = baseY - yDiff;
		game->ledges[98].w = 208;
		
		game->ledges[97].x = baseX + 2 * xDiff;
		game->ledges[97].y = baseY - 2 * yDiff;
		game->ledges[97].w = 208;
		
		//cookie
	    game->ledges[86].x = baseX + 3.5 * xDiff;
		game->ledges[86].y = baseY - 2.1 *yDiff;
		game->ledges[86].w = 148;

		game->ledges[87].x = baseX + 3.5 * xDiff;
		game->ledges[87].y = baseY - 2.3 * yDiff;
		game->ledges[87].w = 148;

		game->ledges[96].x = baseX + 3.5 * xDiff;
		game->ledges[96].y = baseY - 2.5 * yDiff;
		game->ledges[96].w = 148;
		
		//1 way
		game->ledges[95].x = baseX + 4.5 * xDiff;
		game->ledges[95].y = baseY - yDiff;
		game->ledges[95].w = 208;

		game->ledges[94].x = baseX + 6 * xDiff;
		game->ledges[94].y = baseY - 2 * yDiff;
		game->ledges[94].w = 148;

		game->ledges[93].x = baseX + 5 * xDiff;
		game->ledges[93].y = baseY - 3.5 * yDiff;
		game->ledges[93].w = 148;
		
		//top 
		game->ledges[92].x = baseX + 3.4 * xDiff;
		game->ledges[92].y = baseY - 4.5  * yDiff;
		game->ledges[92].w = 180;

		game->ledges[91].x = baseX + 3.1 * xDiff;
		game->ledges[91].y = game->ledges[92].y - game->ledges[91].h;
		game->ledges[91].w = 128;

		//2 way
		game->ledges[90].x = baseX + 1.3 * xDiff;
		game->ledges[90].y = baseY - 3.2 * yDiff;
		game->ledges[90].w = 128;
		game->ledges[90].h = 56;
		
		//top 
		game->ledges[89].x = baseX + 32;
		game->ledges[89].y = baseY - 4.5  * yDiff;
		game->ledges[89].w = 180;
		

		game->ledges[88].x = baseX - 64;
		game->ledges[88].y = game->ledges[89].y -game->ledges[88].h - 16;
		game->ledges[88].w = 128;

		game->counter = 0;
		game->collectable.isCollected = false;

		game->door.isCollected = false;
		game->door1.isCollected = false;

		initCollectableAboveLedge(game);
		initDoors(game);
			
	}
}

void initDoors(GameState* game)
{
	game->door.x = game->ledges[92].x + game->ledges[92].w / 3 -  DOOR_WIDTH/ 2;
	game->door.y = game->ledges[92].y - game->ledges[92].h - 1;
	game->door.w = DOOR_WIDTH;
	game->door.h = DOOR_HEIGHT;

	game->door1.x = game->ledges[89].x + game->ledges[89].w / 3 - DOOR_WIDTH / 2;
	game->door1.y = game->ledges[89].y - game->ledges[89].h - 1;
	game->door1.w = DOOR_WIDTH;
	game->door1.h = DOOR_HEIGHT;
}

void initCollectableAboveLedge(GameState* game)
{
	game->collectable.x = game->ledges[96].x + game->ledges[96].w / 2 - COLLACTABLE_SIZE / 2;
	game->collectable.y = game->ledges[96].y  - game->ledges[96].h - 20;
	game->collectable.w = COLLACTABLE_SIZE;
	game->collectable.h = COLLACTABLE_SIZE;
}

void processEvents(SDL_Window* window, GameState* game)
{
	SDL_Event event;

	while (SDL_PollEvent(&event))
	{
		switch (event.type)
		{
		case SDL_WINDOWEVENT_CLOSE:
		{
			if (window)
			{
				SDL_DestroyWindow(window);
				window = NULL;
				
			}
		}
		break;
		case SDL_KEYDOWN:
		{
			switch (event.key.keysym.scancode)
			{
			case SDL_SCANCODE_ESCAPE:
				SDL_DestroyWindow(window);
				window = NULL;
				SDL_Quit();
				exit(0);
				

				break;
			}
		}
		break;
		case SDL_QUIT:
			SDL_DestroyWindow(window);
			window = NULL;
		
			SDL_Quit();
			exit(0);
			break;
		}
	}

	const Uint8* state = SDL_GetKeyboardState(NULL);
	if (state[SDL_SCANCODE_UP])
	{
		if (!game->alice.dy)
		{
			game->alice.dy = -10;
	    }
    }
	//Walking
	if (state[SDL_SCANCODE_LEFT])
	{
		game->alice.dx -= 0.5;
		if (game->alice.x < 0) {
			game->alice.x = 0;
		}
		if (game->alice.dx < -6)
		{
			game->alice.dx = -6;
		}
		game->alice.facingLeft = 1;
		game->alice.slowingDown = 0;
	}
	else if (state[SDL_SCANCODE_RIGHT])
	{
		game->alice.dx += 0.5;
		if (game->alice.x + 32 > WINDOW_W + 384) {
			game->alice.x = WINDOW_W + 384 - 32;
		}

		if (game->alice.dx > 6)
		{
			game->alice.dx = 6;
		}
		game->alice.facingLeft = 0;
		game->alice.slowingDown = 0;
	}
	else
	{
		game->alice.animFrame = 0;
		game->alice.dx *= 0.8f;
		game->alice.slowingDown = 1;
		if (fabsf(game->alice.dx) < 0.1f)
		{
			game->alice.dx = 0;
		}
	}
}

void process(GameState* game)
{
	game->time++;

	object* alice = &game->alice;
	alice->x += alice->dx;
	alice->y += alice->dy;

	if (alice->dx != 0 && alice->onLedge && !alice->slowingDown)
	{
		if (game->time % 8 == 0)
		{
			if (alice->animFrame != 4 && alice->animFrame != 5)
			{
				alice->animFrame++;
			}
			else
			{
				alice->animFrame = 1;
			}
		}
	}
	else if (!alice->onLedge)
	{
		alice->animFrame = 5;
	}
	else
	{
		alice->animFrame = 0;
	}

	if (isAliceOnTheFloor(alice))
	{
		teleportAliceToStartPosition(alice);
	}

	Collectable* collectable = &game->collectable;
	if (collide2d(
		alice->x,
		alice->y,
		collectable->x,
		collectable->y,
		alice->dx,
		alice->dy,
		collectable->w,
		collectable->h))
	{
		collectable->isCollected = true;
		collectable->x = 0;
		collectable->y = 0;

		game->counter++;
	}

	Door *door = &game->door;
	if (collide2d(
		alice->x,
		alice->y,
		door->x,
		door->y,
		alice->dx,
		alice->dy,
		door->w,
		door->h))
	{
		door->isCollected = true;
		teleportAliceToStartPosition(alice);
	}
	Door* door1 = &game->door1;
	if (collide2d(
		alice->x,
		alice->y,
		door1->x,
		door1->y,
		alice->dx,
		alice->dy,
		door1->w,
		door1->h))
	{
		door1->isCollected = true;
		isEnd = 1;
	}

	alice->dy += GRAVITY;

	game->scrollX = -game->alice.x + WINDOW_W / 2;
	if (game->scrollX > 0)
		game->scrollX = 0;
	int maxScrollX = -(WINDOW_W +400  - WINDOW_W);
	if (game->scrollX < maxScrollX) {
		game->scrollX = maxScrollX;
	}
}

int  isAliceOnTheFloor(object* alice)
{
	return alice->y >= FLOR_POSITION_Y - LEDGE_HEIGHT;
}

void teleportAliceToStartPosition(object* alice)
{
	alice->x = ALICE_STAR_POSITION_X;
	alice->y = ALICE_STAR_POSITION_Y;
}

int collide2d(float x1, float y1, float x2, float y2, float wt1, float ht1, float wt2, float ht2)
{
	return (!((x1 > (x2 + wt2)) || (x2 > (x1 + wt1)) || (y1 > (y2 + ht2)) || (y2 > (y1 + ht1))));
}

void collisionDetect(GameState* game)
{
	for (int i = 0; i < 100; i++)
	{
		float mw = 32, mh = 64;
		float mx = game->alice.x, my = game->alice.y;
		float bx = game->ledges[i].x, by = game->ledges[i].y, bw = game->ledges[i].w, bh = game->ledges[i].h;

		if (game->alice.x < 0) {
			game->alice.x = 0;
		}
		if (game->alice.x + 32 > WINDOW_W + 400) {
			game->alice.x = WINDOW_W + 400 - 32;
			
		}
		if (game->alice.y < 0) {
			game->alice.y = 0;
		}
		if (game->alice.y + 64 > WINDOW_H) {
			game->alice.y = WINDOW_H - 64;
			game->alice.dy = 0;
			game->alice.onLedge = 1;
		}

		if (mx + mw / 2 > bx && mx + mw / 2 < bx + bw)
		{
			//are we bumping our head?
			if (my < by + bh && my > by && game->alice.dy < 0)
			{
				game->alice.y = by + bh;
				my = by + bh;

				//bumped our head, stop any jump velocity
				game->alice.dy = 0;
				game->alice.onLedge = 1;
			}
		}
		if (mx + mw > bx && mx < bx + bw)
		{
			//are we landing on the ledge
			if (my + mh > by && my < by && game->alice.dy > 0)
			{
				game->alice.y = by - mh;
				my = by - mh;

				game->alice.dy = 0;
				game->alice.onLedge = 1;
			}
		}

		if (my + mh > by && my < by + bh)
		{
			//rubbing against right edge
			if (mx < bx + bw && mx + mw > bx + bw && game->alice.dx < 0)
			{
				//correct x
				game->alice.x = bx + bw;
				mx = bx + bw;

				game->alice.dx = 0;
			}
			//rubbing against left edge
			else if (mx + mw > bx && mx < bx && game->alice.dx > 0)
			{
				//correct x
				game->alice.x = bx - mw;
				mx = bx - mw;

				game->alice.dx = 0;
			}
		}
	}
}

void doRender(SDL_Renderer* renderer, GameState* game) {
	if (!isEnd) {
		SDL_RenderCopy(renderer, game->backgroundTexture, NULL, NULL);

		for (int i = 0; i < 100; i++)
		{
			SDL_Rect ledgeRect = { game->scrollX + game->ledges[i].x,game->ledges[i].y, game->ledges[i].w,game->ledges[i].h };
			SDL_RenderCopy(renderer, game->tiles, NULL, &ledgeRect);
		}

		renderDoors(renderer, game);

		SDL_Rect rect = { game->scrollX + game->alice.x, game->alice.y, 32, 64 };
		SDL_RenderCopyEx(renderer, game->aliceFrames[game->alice.animFrame],
			NULL, &rect, 0, NULL, (game->alice.facingLeft == 0));

		renderCallectable(renderer, game);
		//renderCounterText(renderer , game);
	}
		if (isEnd)
		{
			if (game->counter == 3) {
				DisplayEndPicture(renderer, "good_end.bmp", &game);
			}
			else {
				DisplayEndPicture(renderer, "bad_end.bmp", &game);
			}
		}
	
	SDL_RenderPresent(renderer);
}

void renderCallectable(SDL_Renderer* renderer, GameState* game)
{
	if (game->collectable.isCollected)
	{
		SDL_RenderCopy(renderer, game->collactbleImage, NULL, &(SDL_Rect){0, 0, 0, 0});
	}
	else
	{
		SDL_Rect collectableRect = { game->scrollX + game->collectable.x, game->collectable.y, game->collectable.w, game->collectable.h };
		SDL_RenderCopy(renderer, game->collactbleImage, NULL, &collectableRect);
	}
}

void renderDoors(SDL_Renderer* renderer, GameState* game)
{
	SDL_Rect DoorRect = { game->scrollX + game->door.x, game->door.y, game->door.w, game->door.h };
	SDL_RenderCopy(renderer, game->doorImage, NULL, &DoorRect);

	if (!game->door1.isCollected) 
	{
		SDL_Rect DoorRect1 = { game->scrollX + game->door1.x, game->door1.y, game->door1.w, game->door1.h };
		SDL_RenderCopy(renderer, game->door1Image, NULL, &DoorRect1);
	}
}
void DisplayEndPicture(SDL_Renderer* renderer, char* path, GameState* game) {
	
	SDL_Surface* surface;
	if (game->counter != 3) {
		surface = IMG_Load("bad_end.bmp");
		if (!surface) {
			printf("Error loading image: %s\n", IMG_GetError());
			return;
		}
		game->texture = SDL_CreateTextureFromSurface(renderer, surface);
		if (SDL_GetError() && SDL_GetError()[0] != '\0') {
			printf("SDL Render Error: %s\n", SDL_GetError());
		}
		SDL_FreeSurface(surface);

		SDL_Rect endimg = { 1, 1, 1280, 720 };
		SDL_RenderCopy(renderer, game->texture, NULL, &endimg);
 	}
	 else {
		surface = IMG_Load("good_end.bmp");
		game->texture1 = SDL_CreateTextureFromSurface(renderer, surface);
		SDL_FreeSurface(surface);
		if (!game->texture1)
			printf("%s", TTF_GetError());
		SDL_Rect endimg1 = { 1, 1, 1280, 720 };
		SDL_RenderCopy(renderer, game->texture1, NULL, &endimg1);
	}
}
void renderCounterText(SDL_Renderer* renderer, GameState* game)
{
	char text[20];
	char counterText[2];
	SDL_Color white = { 255, 255, 255,255 };
	TTF_Font* Sans;
	SDL_Surface* surfaceMessage;
	SDL_Texture* Message;

	sprintf_s(counterText, "%d", game->counter);
	sprintf_s(text, "%s  %s items collected:", counterText);
	Sans = TTF_OpenFont("font.ttf", 12);
	if (!Sans)
		printf("%s", TTF_GetError());
	surfaceMessage = TTF_RenderText_Solid(Sans, text, white);
	if (!surfaceMessage)
		printf("%s", TTF_GetError());
	Message = SDL_CreateTextureFromSurface(renderer, surfaceMessage);
	if (!Message)
		printf("%s", TTF_GetError());

	SDL_RenderCopy(renderer, Message, NULL, &(SDL_Rect){0, 0, 200, 50});
}

int main(int argc, char* args[])
{
	GameState gameState;
	SDL_Window* window = NULL; // Declare a window
	SDL_Renderer* renderer = NULL; // Declare a renderer

	TTF_Init();
	SDL_Init(SDL_INIT_VIDEO);

	//Create an application window with the following settings:
	window = SDL_CreateWindow("Alice's Adventures: Tea Odyssey", // window title
		SDL_WINDOWPOS_UNDEFINED,
		SDL_WINDOWPOS_UNDEFINED,
		1280, // width	
		720, // height 
		0
	);
	renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
	gameState.renderer = renderer;
	
		loadGame(&gameState);
		while (1) 
		{

			processEvents(window, &gameState);
			process(&gameState);
			collisionDetect(&gameState);
			doRender(renderer, &gameState);
				
			SDL_Delay(16);
		}

			SDL_RenderPresent(renderer);

		//Shutdown game and unload all memory
		SDL_DestroyTexture(gameState.aliceFrames[0]);
		SDL_DestroyTexture(gameState.aliceFrames[1]);
		SDL_DestroyTexture(gameState.aliceFrames[2]);
		SDL_DestroyTexture(gameState.aliceFrames[3]);
		SDL_DestroyTexture(gameState.aliceFrames[4]);
		SDL_DestroyTexture(gameState.aliceFrames[5]);
		SDL_DestroyTexture(gameState.tiles);
		SDL_DestroyTexture(gameState.doorImage);
		SDL_DestroyTexture(gameState.door1Image);
		SDL_DestroyTexture(gameState.backgroundTexture);
		SDL_DestroyTexture(gameState.texture);
		SDL_DestroyTexture(gameState.texture1);

	// Close and destroy the window
	SDL_DestroyWindow(window);
	SDL_DestroyRenderer(renderer);

	// Clean up
	TTF_Quit();
	SDL_Quit();
	return 0;
}
